// <auto-generated />
using System;
using FlightMath.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightMath.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    partial class FlightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AirportMainData", b =>
                {
                    b.Property<decimal>("FlightAsOriginSequence")
                        .HasColumnType("numeric(9,0)");

                    b.Property<decimal>("FlightOriginsSequence")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("FlightAsOriginSequence", "FlightOriginsSequence");

                    b.HasIndex("FlightOriginsSequence");

                    b.ToTable("FlightOrigin", "dbo");
                });

            modelBuilder.Entity("AirportMainData1", b =>
                {
                    b.Property<decimal>("FlightAsDestinationSequence")
                        .HasColumnType("numeric(9,0)");

                    b.Property<decimal>("FlightDestinationsSequence")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("FlightAsDestinationSequence", "FlightDestinationsSequence");

                    b.HasIndex("FlightDestinationsSequence");

                    b.ToTable("FlightDestination", "dbo");
                });

            modelBuilder.Entity("FlightMath.Airport", b =>
                {
                    b.Property<decimal>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Sequence")
                        .UseIdentityColumn();

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("Airport_Name");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("numeric(8,0)")
                        .HasColumnName("Altitude");

                    b.Property<decimal?>("BaseId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("Base_Id");

                    b.Property<string>("City")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("City");

                    b.Property<decimal?>("CountryId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("CountryId");

                    b.Property<string>("Dst")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("DST")
                        .IsFixedLength(true);

                    b.Property<string>("IataCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("IATA_Code");

                    b.Property<string>("IcaoCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("ICAO_Code");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("Latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(10,6)")
                        .HasColumnName("Longitude");

                    b.Property<decimal?>("UtcOffset")
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("UTC_Offset");

                    b.HasKey("Sequence");

                    b.ToTable("AIRPORT");
                });

            modelBuilder.Entity("FlightMath.Models.MainData", b =>
                {
                    b.Property<decimal>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("Sequence")
                        .UseIdentityColumn();

                    b.Property<decimal?>("AWBSeq")
                        .HasColumnType("numeric(9,0)")
                        .HasColumnName("AWBSeq");

                    b.Property<string>("ActualKGs")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ActualKGs");

                    b.Property<string>("Carrier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Carrier");

                    b.Property<string>("Dates")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Dates");

                    b.Property<string>("Dest")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Dest");

                    b.Property<string>("Flights")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Flights");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Origin");

                    b.Property<decimal?>("PCWeight")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("PC_Weight");

                    b.Property<string>("Prefix")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .HasColumnName("Prefix")
                        .IsFixedLength(true);

                    b.Property<string>("Serial")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("Serial");

                    b.HasKey("Sequence");

                    b.ToTable("MainData", "dbo");
                });

            modelBuilder.Entity("AirportMainData", b =>
                {
                    b.HasOne("FlightMath.Models.MainData", null)
                        .WithMany()
                        .HasForeignKey("FlightAsOriginSequence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightMath.Airport", null)
                        .WithMany()
                        .HasForeignKey("FlightOriginsSequence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirportMainData1", b =>
                {
                    b.HasOne("FlightMath.Models.MainData", null)
                        .WithMany()
                        .HasForeignKey("FlightAsDestinationSequence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightMath.Airport", null)
                        .WithMany()
                        .HasForeignKey("FlightDestinationsSequence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
